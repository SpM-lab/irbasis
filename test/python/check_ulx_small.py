import unittest
import numpy
import irbasis as ir
import math

class TestMethods(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        
        super(TestMethods, self).__init__(*args, **kwargs)

    def test_small_lambda_f(self):
        maxValue_ref={
            ("ulx", 10.0 ) :  (3.4038153446392974),
            ("vly", 10.0 ) :  (2.9163059003876466)
        }
        ref_ulx_f_edge = numpy.array(
            [(0.000000000000000000e+00,1.694476145967110936e-02,3.388952291934221872e-02,5.083428437901332808e-02,
             6.777904583868443744e-02,8.472380729835554680e-02,1.016685687580266562e-01,1.186133302176977655e-01,
             1.355580916773688749e-01,1.525028531370399842e-01),
            (9.759311485332040625e-01,9.786054653628480926e-01,9.812797821924920116e-01,9.839540990221360417e-01,
             9.866284158517800718e-01,9.893027326814239908e-01,9.919770495110680208e-01,9.946513663407120509e-01,
             9.973256831703559699e-01,1.000000000000000000e+00)]
        )
        ref_ulx_f = numpy.array(
            [(-3.172362670797115052e-12,-1.508798987301808447e-01,-2.965799304638555012e-01,-4.320818247853521199e-01,
             -5.526864183767731253e-01,-6.541630593997038723e-01,-7.328870171832094771e-01,-7.859612060109396614e-01,
             -8.113187941798111202e-01,-8.078035965302724497e-01),
            (-3.699372306142700295e-01,-1.208710591863114137e-01,1.640764421317852662e-01,4.875594973987035785e-01,
             8.523658454166656018e-01,1.261421806577048832e+00,1.717797503448074803e+00,2.224712238995878888e+00,
             2.785540036416052523e+00,3.403815344639297358e+00)]
        )

        ref_vly_f_edge = numpy.array(
            [(0.000000000000000000e+00,1.053708027539159396e-02,2.107416055078318792e-02,3.161124082617478015e-02,
             4.214832110156637585e-02,5.268540137695797154e-02,6.322248165234956030e-02,7.375956192774116293e-02,
             8.429664220313275169e-02,9.483372247852434045e-02),
            (9.567386099142182188e-01,9.615454310348606759e-01,9.663522521555030220e-01,9.711590732761454792e-01,
             9.759658943967879363e-01,9.807727155174302824e-01,9.855795366380727396e-01,9.903863577587151967e-01,
             9.951931788793575429e-01,1.000000000000000000e+00)]
        )
        ref_vly_f = numpy.array(
            [(1.617015831227918910e-09,1.517232186692340501e-01,2.980682030721184539e-01,4.338805764872720183e-01,
             5.544410846960873274e-01,6.556527623579950781e-01,7.341943600963481975e-01,7.876330831061096882e-01,
             8.144926816875912579e-01,8.142759987183209036e-01),
            (3.558019021420654182e-01,1.369438591506672853e-01,-1.133060603566712621e-01,-3.969109418728369865e-01,
             -7.158922059290746542e-01,-1.072329850810204155e+00,-1.468362670034994988e+00,-1.906188444664526971e+00,
             -2.388064110517603034e+00,-2.916305900387646588e+00)]
        )

        for _lambda in [10.0]:
            prefix =  "basis_f-mp-Lambda"+str(_lambda)+"_np10"
            rb = ir.basis("../irbasis.h5", prefix)
            Nl = rb.dim()
            if Nl % 2 == 1: Nl -=1
            for i in range(2):
                #ulx 
                xvec = ref_ulx_f_edge[i]
                ulxvec=numpy.array([rb.ulx(Nl-1,x) for x in xvec])
                print(abs(ulxvec-ref_ulx_f[i])/ maxValue_ref[("ulx", _lambda)])
                #self.assertLessEqual(abs(ulxvec-ref_ulx_f[i])/ maxValue_ref[("ulx", 10.0)], math.pow(10.0 , -6))
                #vly            
                xvec = ref_vly_f_edge[i]
                vlyvec=numpy.array([rb.vly(Nl-1,x) for x in xvec])
                print(abs(vlyvec-ref_vly_f[i])/ maxValue_ref[("vly", _lambda)])
                #self.assertLessEqual(abs(vlyvec-ref_vly_f[i])/ maxValue_ref[("vly", 10.0)], math.pow(10.0 , -6))

    def test_small_lambda_b(self):
        maxValue_ref={            
            ("ulx", 10.0 ) :  (3.398907259691182),
            ("vly", 10.0 ) :  (3.050244112342474)
        }

        ref_ulx_b_edge = numpy.array(
            [(0.000000000000000000e+00,1.694476145967110936e-02,3.388952291934221872e-02,5.083428437901332808e-02,
              6.777904583868443744e-02,8.472380729835554680e-02,1.016685687580266562e-01,1.186133302176977655e-01,
              1.355580916773688749e-01,1.525028531370399842e-01),
            (9.759311485332040625e-01,9.786054653628480926e-01,9.812797821924920116e-01,9.839540990221360417e-01,
             9.866284158517800718e-01,9.893027326814239908e-01,9.919770495110680208e-01,9.946513663407120509e-01,
             9.973256831703559699e-01,1.000000000000000000e+00)]
        )
        ref_ulx_b = numpy.array(
            [(-1.672798622309374444e-12,-1.508631820686721359e-01,-2.965795491809987694e-01,-4.321616548861529905e-01,
              -5.529368066103269586e-01,-6.546945472793543885e-01,-7.338224373840493975e-01,-7.874265289713958671e-01,
              -8.134331724265141395e-01,-8.106691081950956335e-01
            ),
            (-3.803932151040520515e-01,-1.319222577032267973e-01,1.526424129150451003e-01,4.759893924702069401e-01,
             8.409435818185079237e-01,1.250471409735941508e+00,1.707686216115541500e+00,2.215853799701242632e+00,
             2.778398134572987122e+00,3.398907259691181793e+00)]
        )
        
        ref_vly_b_edge = numpy.array(
            [(0.000000000000000000e+00,1.316264342747304993e-02,2.632528685494609985e-02,3.948793028241914804e-02,
              5.265057370989219970e-02,6.581321713736525136e-02,7.897586056483829609e-02,9.213850399231135468e-02,
              1.053011474197843994e-01,1.184637908472574441e-01
            ),
            (9.645984926534767467e-01,9.685319934697571576e-01,9.724654942860374573e-01,9.763989951023178682e-01,
             9.803324959185981680e-01,9.842659967348785788e-01,9.881994975511588786e-01,9.921329983674392894e-01,
             9.960664991837195892e-01,1.000000000000000000e+00)]
        )
        ref_vly_b = numpy.array(
            [(3.007818897485046395e-10,1.522499308158664355e-01,2.991755620280717731e-01,4.356426183978957534e-01,
              5.568896550006816604e-01,6.586967484269471429e-01,7.375337698748679616e-01,7.906828196371976647e-01,
              8.163304866616557520e-01,8.136268423639115843e-01),
            (3.213235076237245247e-01,9.328907086549333150e-02,-1.664028518797297518e-01,-4.597822645843270828e-01,
             -7.889500735268621945e-01,-1.156079158115288719e+00,-1.563415432879540212e+00,-2.013278900281954442e+00,
             -2.508064693999920713e+00,-3.050244112342474168e+00)]
        )
        #for _lambda in [10]:
            #prefix =  "basis_b-mp-Lambda"+str(_lambda)+"_np10"
            #rb = ir.basis("../irbasis.h5", prefix)
            #Nl = rb.dim()
            #if Nl % 2 == 1: Nl -=1
            # region near 0
            #ulx
            #xvec = ref_ulx_b_edge[0]
            #datavec=numpy.array([rb.ulx(Nl-1,x) for x in xvec])
            #print(ref_ulx_f[0])
            #vly


if __name__ == '__main__':
    unittest.main()

# https://cmake.org/pipermail/cmake/2012-May/050120.html
