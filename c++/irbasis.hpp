#pragma once

#include <iostream>
#include <complex>
#include <cmath>
#include <vector>
#include <set>
#include <assert.h>
#include <memory>
#include <fstream>
#include <iomanip>
#include <numeric>

#include <hdf5.h>

namespace irbasis {
  namespace internal {

    template<typename S>
    inline S stoscalar(const std::string &s);

    template<>
    inline double stoscalar<double>(const std::string &s) {
      return std::stof(s);
    }

    template<>
    inline long double stoscalar<long double>(const std::string &s) {
      return std::stof(s);
    }

    template<typename T>
    std::vector<std::pair<T, T>>
    gauss_legendre_nodes(int num_nodes) {
      if (num_nodes == 24) {
        std::vector<std::pair<T, T>> nodes(24);

        nodes[0] = std::make_pair<T>(stoscalar<T>(
            "0.995187219997021360179997409700736811874597692596002877441600545114283832069457737883397289337115708862345346297896585399449723774571559840140935180418818945525556626616214223945236485156081678238959696729183624339135916736509873180888845542440566555836962109178057161796892504637545227856454498132057"),
                                     stoscalar<T>(
                                         "0.0123412297999871995468056670700372915759100408913665168172873209410917255178811137917987186719204245118391668507179752021919736085531955203240536027970786521356478573832633493407323107496772162595516230980489700767963287958540270795597236457014112169997285946194632806836898378755389898741090269255308"));
        nodes[1] = std::make_pair<T>(stoscalar<T>(
            "-0.995187219997021360179997409700736811874597692596002877441600545114283832069457737883397289337115708862345346297896585399449723774571559840140935180418818945525556626616214223945236485156081678238959696729183624339135916736509873180888845542440566555836962109178057161796892504637545227856454498132057"),
                                     stoscalar<T>(
                                         "0.0123412297999871995468056670700372915759100408913665168172873209410917255178811137917987186719204245118391668507179752021919736085531955203240536027970786521356478573832633493407323107496772162595516230980489700767963287958540270795597236457014112169997285946194632806836898378755389898741090269255308"));
        nodes[2] = std::make_pair<T>(stoscalar<T>(
            "0.97472855597130949819839199300816906174118305304017871981159356510718112128098022453863747428171545498274125857557134911447981802810620839102900103689628991390032721025519554054557757008184805613924705817182219387686687316167563796492819345486234892515376983952394328004328118395373324903665839912863"),
                                     stoscalar<T>(
                                         "0.0285313886289336631813078159518782864491977979319081166016648047576440056374291434256854254228098755422737224452711633426188506404779428430343631052424983978091405445557790206527391293478807818130301641760878492678184457761229065303399826533483010921962299302202888714000294545952958411114022494598733"));
        nodes[3] = std::make_pair<T>(stoscalar<T>(
            "-0.97472855597130949819839199300816906174118305304017871981159356510718112128098022453863747428171545498274125857557134911447981802810620839102900103689628991390032721025519554054557757008184805613924705817182219387686687316167563796492819345486234892515376983952394328004328118395373324903665839912863"),
                                     stoscalar<T>(
                                         "0.0285313886289336631813078159518782864491977979319081166016648047576440056374291434256854254228098755422737224452711633426188506404779428430343631052424983978091405445557790206527391293478807818130301641760878492678184457761229065303399826533483010921962299302202888714000294545952958411114022494598733"));
        nodes[4] = std::make_pair<T>(stoscalar<T>(
            "0.938274552002732758523649001708721449654819658077451346635027175909589496052535670959964641535869955509426705762351592989599744947070438307609501244234954493755163331367597248172246615980242848760088063334178612158066107752168513489354641956785980885394486614206561747197997323570046956360670373999963"),
                                     stoscalar<T>(
                                         "0.0442774388174198061686027482113382288593128418338578967413972297210243762822664396343947170155594934934611803046066530352490769669525012630503089839091175520932522330681764807671830570648211944799908348398720715944900305481342571090714940628894962186599515560606956040614089479774970343135042658247083"));
        nodes[5] = std::make_pair<T>(stoscalar<T>(
            "-0.938274552002732758523649001708721449654819658077451346635027175909589496052535670959964641535869955509426705762351592989599744947070438307609501244234954493755163331367597248172246615980242848760088063334178612158066107752168513489354641956785980885394486614206561747197997323570046956360670373999963"),
                                     stoscalar<T>(
                                         "0.0442774388174198061686027482113382288593128418338578967413972297210243762822664396343947170155594934934611803046066530352490769669525012630503089839091175520932522330681764807671830570648211944799908348398720715944900305481342571090714940628894962186599515560606956040614089479774970343135042658247083"));
        nodes[6] = std::make_pair<T>(stoscalar<T>(
            "0.886415527004401034213154341982196755087333043308920040371037916775674834398959172104123501996181701253529510891007502417588566487438356712427097613906961505972118554237037211853806487346896167995660631596198813872247129280757355265746537324606526634909526429044695588645098021641157906846342678157804"),
                                     stoscalar<T>(
                                         "0.0592985849154367807463677585001085845412001265652134910373765512940983031775082415660683556106090092998654733952492642466909653073834070291103432919838456250955380753837859345492817299145644958959367291816621761687898337760987530926613795554356869343124524696513178977787335055077227200672136247792298"));
        nodes[7] = std::make_pair<T>(stoscalar<T>(
            "-0.886415527004401034213154341982196755087333043308920040371037916775674834398959172104123501996181701253529510891007502417588566487438356712427097613906961505972118554237037211853806487346896167995660631596198813872247129280757355265746537324606526634909526429044695588645098021641157906846342678157804"),
                                     stoscalar<T>(
                                         "0.0592985849154367807463677585001085845412001265652134910373765512940983031775082415660683556106090092998654733952492642466909653073834070291103432919838456250955380753837859345492817299145644958959367291816621761687898337760987530926613795554356869343124524696513178977787335055077227200672136247792298"));
        nodes[8] = std::make_pair<T>(stoscalar<T>(
            "0.820001985973902921953949872669745208076126477667855587243981026001382978953554540082260521172583796066642476585830915236997595674869391089731040139321799775143346334385160314673498496406277658541819456180906355548981676258032941813729875426437831671641734794904072511155470558924395369216844477705068"),
                                     stoscalar<T>(
                                         "0.0733464814110803057340336152531165181193365098484994714027024906600413884758709348323251422694445551958844309079341158927693012247996928526423877450601776912550600854944985229487704917122675007345403564777169078420148392438502785281584325129303566997853186794893103931008654660305893086447498565784912"));
        nodes[9] = std::make_pair<T>(stoscalar<T>(
            "-0.820001985973902921953949872669745208076126477667855587243981026001382978953554540082260521172583796066642476585830915236997595674869391089731040139321799775143346334385160314673498496406277658541819456180906355548981676258032941813729875426437831671641734794904072511155470558924395369216844477705068"),
                                     stoscalar<T>(
                                         "0.0733464814110803057340336152531165181193365098484994714027024906600413884758709348323251422694445551958844309079341158927693012247996928526423877450601776912550600854944985229487704917122675007345403564777169078420148392438502785281584325129303566997853186794893103931008654660305893086447498565784912"));
        nodes[10] = std::make_pair<T>(stoscalar<T>(
            "0.740124191578554364243828103099978425523292487014185456866382368271900338640922932441331356131128794329852627074539828821361746197343959949135522304607366081010948652757177642052275718595307620875986328723508461480369791806746658074627512256345757595939965048177857556311895595782985507807212435325486"),
                                      stoscalar<T>(
                                          "0.0861901615319532759171852029837426671850805882379330055884071438612868844607805312688886562972816971732787465671984327992158782827038381983594380916492525003385563462630861694048857276454548529177279961693054540872738963763950131372564031674654030737773100525128451496727198421907864245682562763450651"));
        nodes[11] = std::make_pair<T>(stoscalar<T>(
            "-0.740124191578554364243828103099978425523292487014185456866382368271900338640922932441331356131128794329852627074539828821361746197343959949135522304607366081010948652757177642052275718595307620875986328723508461480369791806746658074627512256345757595939965048177857556311895595782985507807212435325486"),
                                      stoscalar<T>(
                                          "0.0861901615319532759171852029837426671850805882379330055884071438612868844607805312688886562972816971732787465671984327992158782827038381983594380916492525003385563462630861694048857276454548529177279961693054540872738963763950131372564031674654030737773100525128451496727198421907864245682562763450651"));
        nodes[12] = std::make_pair<T>(stoscalar<T>(
            "0.648093651936975569252495786910747626669658298618956780298933665024448317568539771928117770365727243399051995441474400345334779405862607551907487696200358068412710469789355658403614993527515453423268585020767159429843444695548839634907549766762473234597195761193868513788480112969544759731210203827751"),
                                      stoscalar<T>(
                                          "0.0976186521041138882698806644642471544279189688536859440833106100229543385775919783480200396907181874824147457133642686456766424197285721070434249443842118060710420427916891916725080127259339856858762627157395213029252630109136449422236160596472891604329158211202756347139117217837381919599166181081467"));
        nodes[13] = std::make_pair<T>(stoscalar<T>(
            "-0.648093651936975569252495786910747626669658298618956780298933665024448317568539771928117770365727243399051995441474400345334779405862607551907487696200358068412710469789355658403614993527515453423268585020767159429843444695548839634907549766762473234597195761193868513788480112969544759731210203827751"),
                                      stoscalar<T>(
                                          "0.0976186521041138882698806644642471544279189688536859440833106100229543385775919783480200396907181874824147457133642686456766424197285721070434249443842118060710420427916891916725080127259339856858762627157395213029252630109136449422236160596472891604329158211202756347139117217837381919599166181081467"));
        nodes[14] = std::make_pair<T>(stoscalar<T>(
            "0.545421471388839535658375617218372370010783992587618175433614389830564839179570897095834867440806250197774665331367677894881029740065082898550406894154702186680891431685418265351943629572861231526418120839001806491532525067714859485587443449261454718084937798945777620186294594875124993903330645243205"),
                                      stoscalar<T>(
                                          "0.107444270115965634782577342446606222794628690134220021766541640886821866394437105980586727120915236672945076498454815476823439901643102885282830543962266851556251956709331696682107380679861280071851870323872823740641856241992841364843152888380035317713347953732555881218806283379216639205208219287579"));
        nodes[15] = std::make_pair<T>(stoscalar<T>(
            "-0.545421471388839535658375617218372370010783992587618175433614389830564839179570897095834867440806250197774665331367677894881029740065082898550406894154702186680891431685418265351943629572861231526418120839001806491532525067714859485587443449261454718084937798945777620186294594875124993903330645243205"),
                                      stoscalar<T>(
                                          "0.107444270115965634782577342446606222794628690134220021766541640886821866394437105980586727120915236672945076498454815476823439901643102885282830543962266851556251956709331696682107380679861280071851870323872823740641856241992841364843152888380035317713347953732555881218806283379216639205208219287579"));
        nodes[16] = std::make_pair<T>(stoscalar<T>(
            "0.433793507626045138487084231913349712452421510927968808080801284656764407033630914057735430466075616883617063341500262975507638197517469919863237058588934137857522968557771096532782319953983092840074145406737762774674563550361481083460225770125158535219055252777868411328086715077995985252302910030209"),
                                      stoscalar<T>(
                                          "0.115505668053725601353344483906783559862270311376496470584449360088670253551318549940344257646812795659959909604702327440655239989062983105038826787057015753648444264478807400939262629952827233915827178910101270924586732916932735652761568135186480256709374093801424623722613972196807277027321598297936"));
        nodes[17] = std::make_pair<T>(stoscalar<T>(
            "-0.433793507626045138487084231913349712452421510927968808080801284656764407033630914057735430466075616883617063341500262975507638197517469919863237058588934137857522968557771096532782319953983092840074145406737762774674563550361481083460225770125158535219055252777868411328086715077995985252302910030209"),
                                      stoscalar<T>(
                                          "0.115505668053725601353344483906783559862270311376496470584449360088670253551318549940344257646812795659959909604702327440655239989062983105038826787057015753648444264478807400939262629952827233915827178910101270924586732916932735652761568135186480256709374093801424623722613972196807277027321598297936"));
        nodes[18] = std::make_pair<T>(stoscalar<T>(
            "0.315042679696163374386793291319810240786478260824817268754230129529882156341243408343873509555208210607225161736403064353665893179130869038734035010886231642991142663349216444985168403969101161068182725689146748549425144267759930496934971240500832836524208738204302881546786650561865093691449384597341"),
                                      stoscalar<T>(
                                          "0.121670472927803391204463153476262425607029559203805778777471754512625393717716961917757803430772841912957145840769868545510992738596262620366419797209967129908066314699224747437737492842862990981834513095739252113933740389194699000121036827445900629859163688489316337390776342887834342248352723411923"));
        nodes[19] = std::make_pair<T>(stoscalar<T>(
            "-0.315042679696163374386793291319810240786478260824817268754230129529882156341243408343873509555208210607225161736403064353665893179130869038734035010886231642991142663349216444985168403969101161068182725689146748549425144267759930496934971240500832836524208738204302881546786650561865093691449384597341"),
                                      stoscalar<T>(
                                          "0.121670472927803391204463153476262425607029559203805778777471754512625393717716961917757803430772841912957145840769868545510992738596262620366419797209967129908066314699224747437737492842862990981834513095739252113933740389194699000121036827445900629859163688489316337390776342887834342248352723411923"));
        nodes[20] = std::make_pair<T>(stoscalar<T>(
            "0.191118867473616309158639820757069631840405103314753356148918576588085952691871741982491111245209730713593414601359546139272154294344368945938401595273649188863410763885213983982148066333438619943082305944631618258987450345728227016992247128382530573524067146426273360919398409942102379042342239199107"),
                                      stoscalar<T>(
                                          "0.125837456346828296121375382511183688726403325581345404178091516881393872666662596882038179256421140724412534011228361937164002369435484255621962330707572169550516702883201194457244081416126575436415399175278284630531577829318295129850834682495092249038456583452514157099195734353187662552926352073621"));
        nodes[21] = std::make_pair<T>(stoscalar<T>(
            "-0.191118867473616309158639820757069631840405103314753356148918576588085952691871741982491111245209730713593414601359546139272154294344368945938401595273649188863410763885213983982148066333438619943082305944631618258987450345728227016992247128382530573524067146426273360919398409942102379042342239199107"),
                                      stoscalar<T>(
                                          "0.125837456346828296121375382511183688726403325581345404178091516881393872666662596882038179256421140724412534011228361937164002369435484255621962330707572169550516702883201194457244081416126575436415399175278284630531577829318295129850834682495092249038456583452514157099195734353187662552926352073621"));
        nodes[22] = std::make_pair<T>(stoscalar<T>(
            "0.0640568928626056260850430826247450385909991954207473934243510817897392835939101078028928761342525090823242273835115756994869112500371756765277735374378372436515481804668409746233647956019276711845937319580510697455314397618513360822351096139837050674073737720614748330506959387258141490546603547335179"),
                                      stoscalar<T>(
                                          "0.127938195346752156974056165224695371851711239541667882421299576372347591540536402412091977566734742330707867860502753435433636550663017320125640776036995870538483576289156291147547955947721891807417071836575418250197455095192548433152375809074547150515750576849992169157248891221785568427039188907896"));
        nodes[23] = std::make_pair<T>(stoscalar<T>(
            "-0.0640568928626056260850430826247450385909991954207473934243510817897392835939101078028928761342525090823242273835115756994869112500371756765277735374378372436515481804668409746233647956019276711845937319580510697455314397618513360822351096139837050674073737720614748330506959387258141490546603547335179"),
                                      stoscalar<T>(
                                          "0.127938195346752156974056165224695371851711239541667882421299576372347591540536402412091977566734742330707867860502753435433636550663017320125640776036995870538483576289156291147547955947721891807417071836575418250197455095192548433152375809074547150515750576849992169157248891221785568427039188907896"));

        return nodes;
      }


      if (num_nodes == 48) {
        std::vector<std::pair<T, T>> nodes(48);

        nodes[0] = std::make_pair<T>(stoscalar<T>(
            "0.99877100725242611860054149156311364008893765027672103861294048137545884360749170001565580499814572283231113997574266671077836861467649794243019319212028649019347607287505984955678316099767987711706383847849935328474745267511929644629070475270075197317847553434244136528894767475820015496141217308957"),
                                     stoscalar<T>(
                                         "0.00315334605230583863267731154389148757828393883169362229520949325031958643831686244221745877404792427837868324118107668573956660847114740993194651515093255848511821234928825928771457746342080314054920802414359581927436000812240605256544334798287426513489327887416573020813747664552229404477643968400556"));
        nodes[1] = std::make_pair<T>(stoscalar<T>(
            "-0.99877100725242611860054149156311364008893765027672103861294048137545884360749170001565580499814572283231113997574266671077836861467649794243019319212028649019347607287505984955678316099767987711706383847849935328474745267511929644629070475270075197317847553434244136528894767475820015496141217308957"),
                                     stoscalar<T>(
                                         "0.00315334605230583863267731154389148757828393883169362229520949325031958643831686244221745877404792427837868324118107668573956660847114740993194651515093255848511821234928825928771457746342080314054920802414359581927436000812240605256544334798287426513489327887416573020813747664552229404477643968400556"));
        nodes[2] = std::make_pair<T>(stoscalar<T>(
            "0.993530172266350757547928750849074118356614749594671929617151838098754618206777178629041981007665365870779472561751579966238982971002217731820938066463119361413605534507570360766827507774041164984208554188703021964592309858216916130338589558601615719626233133405818822733316334746924057180316831412304"),
                                     stoscalar<T>(
                                         "0.00732755390127626210238397962178655005870790255920135327488182954880698007250283167064803751652034929853483520581301450192105952297811559833569592109277566013848399998959880714870537942332061915169489902477243022443335326399636783736534294020486303963235849350428793292317772715944700564719163952016958"));
        nodes[3] = std::make_pair<T>(stoscalar<T>(
            "-0.993530172266350757547928750849074118356614749594671929617151838098754618206777178629041981007665365870779472561751579966238982971002217731820938066463119361413605534507570360766827507774041164984208554188703021964592309858216916130338589558601615719626233133405818822733316334746924057180316831412304"),
                                     stoscalar<T>(
                                         "0.00732755390127626210238397962178655005870790255920135327488182954880698007250283167064803751652034929853483520581301450192105952297811559833569592109277566013848399998959880714870537942332061915169489902477243022443335326399636783736534294020486303963235849350428793292317772715944700564719163952016958"));
        nodes[4] = std::make_pair<T>(stoscalar<T>(
            "0.984124583722826857744583600026598830589239223417384729957650167985529778000980505395131489948007823832730429894704284292848179960695277256694257352502181953070940190767202896151717469151347508703717570782421901655311676459454149333227695716638264965521269595992565371173293313043082722782120027970657"),
                                     stoscalar<T>(
                                         "0.0114772345792345394895926676090916280864205063087476406537668167410350365850873671845112866361972727003593616013319766908431686721431557599899878110361766928366128660002635276311177447975047450494623463316753479008881407947518044839424512047421057962221674204381188357080440093470473524956977076634684"));
        nodes[5] = std::make_pair<T>(stoscalar<T>(
            "-0.984124583722826857744583600026598830589239223417384729957650167985529778000980505395131489948007823832730429894704284292848179960695277256694257352502181953070940190767202896151717469151347508703717570782421901655311676459454149333227695716638264965521269595992565371173293313043082722782120027970657"),
                                     stoscalar<T>(
                                         "0.0114772345792345394895926676090916280864205063087476406537668167410350365850873671845112866361972727003593616013319766908431686721431557599899878110361766928366128660002635276311177447975047450494623463316753479008881407947518044839424512047421057962221674204381188357080440093470473524956977076634684"));
        nodes[6] = std::make_pair<T>(stoscalar<T>(
            "0.97059159254624725046141198380066005730243391163088370602837235216532330912849175498291475370484919755197181424307863483511569712683812195244603010228415942188673770232747892630391539713297531282839576752766382985900969297931509025064054040173740172635565248633673794209274410674009986643284671106607"),
                                     stoscalar<T>(
                                         "0.0155793157229438487281769558344603139763762689915524695130934310526924333561999548391816052133014721114401358107806537024400131770649099216044201000988551783955073406285409222168389437506459771369978703174261967499687905211552648334359139017500567829091264152081809203694794919147683583915510610225386"));
        nodes[7] = std::make_pair<T>(stoscalar<T>(
            "-0.97059159254624725046141198380066005730243391163088370602837235216532330912849175498291475370484919755197181424307863483511569712683812195244603010228415942188673770232747892630391539713297531282839576752766382985900969297931509025064054040173740172635565248633673794209274410674009986643284671106607"),
                                     stoscalar<T>(
                                         "0.0155793157229438487281769558344603139763762689915524695130934310526924333561999548391816052133014721114401358107806537024400131770649099216044201000988551783955073406285409222168389437506459771369978703174261967499687905211552648334359139017500567829091264152081809203694794919147683583915510610225386"));
        nodes[8] = std::make_pair<T>(stoscalar<T>(
            "0.952987703160430860722960666025718343208541331823918736863947603493945870585333587345903064001400656759306590726642872681234729458475396439293079515811500064110932548971471287088029764163462172373750049190672207115134823510716175819322580746931191913290509139940295681459665032011929844578448332988603"),
                                     stoscalar<T>(
                                         "0.0196161604573555278144607196522127096958130377341322391811208305074092462981216840449513783774442841949609835308771105841281547195578590179091197712101493381105236769524246761434056145453248993188037222880380082880780160676065594181655110753447781561231392530437840563066406163512328107590368793052139"));
        nodes[9] = std::make_pair<T>(stoscalar<T>(
            "-0.952987703160430860722960666025718343208541331823918736863947603493945870585333587345903064001400656759306590726642872681234729458475396439293079515811500064110932548971471287088029764163462172373750049190672207115134823510716175819322580746931191913290509139940295681459665032011929844578448332988603"),
                                     stoscalar<T>(
                                         "0.0196161604573555278144607196522127096958130377341322391811208305074092462981216840449513783774442841949609835308771105841281547195578590179091197712101493381105236769524246761434056145453248993188037222880380082880780160676065594181655110753447781561231392530437840563066406163512328107590368793052139"));
        nodes[10] = std::make_pair<T>(stoscalar<T>(
            "0.931386690706554333114174380101601267719997085618950429870604864253073042217111700481423397830857261257610780391467831472486051307259498513900357676905373308738540819042071213211412072583890849566535634693298618842035655572571200791348068348320116611463829454445299142050324905738556662279475468545399"),
                                      stoscalar<T>(
                                          "0.0235707608393243791405193013784492302217297385221885987342390648645650637963913094518367755410967761634190806690824078462688206169213053713839743055605466423717304973224210361070599559010345444087408317436337478066837024618745352434711580028189318635705775026733754863990182519964484732138522561607563"));
        nodes[11] = std::make_pair<T>(stoscalar<T>(
            "-0.931386690706554333114174380101601267719997085618950429870604864253073042217111700481423397830857261257610780391467831472486051307259498513900357676905373308738540819042071213211412072583890849566535634693298618842035655572571200791348068348320116611463829454445299142050324905738556662279475468545399"),
                                      stoscalar<T>(
                                          "0.0235707608393243791405193013784492302217297385221885987342390648645650637963913094518367755410967761634190806690824078462688206169213053713839743055605466423717304973224210361070599559010345444087408317436337478066837024618745352434711580028189318635705775026733754863990182519964484732138522561607563"));
        nodes[12] = std::make_pair<T>(stoscalar<T>(
            "0.905879136715569672822074835671011788312262199827410845352485425471016823120990316802103839868098102221442916931901771097536001338334801071557089392603590602028875439818482644459485679558059271600853117138328213369477432879138713132393451027086750311915973477565695981563238357265786714094899680978177"),
                                      stoscalar<T>(
                                          "0.0274265097083569482000738362625058204511841551616509759972809374993765019410236080239987462027920403237449474284444948789638628394355878066094467843602824760139004690135115733710861681278905130204344113095556099347782237196035386088178092164366260022756686042906129257040190872924727635407029090663386"));
        nodes[13] = std::make_pair<T>(stoscalar<T>(
            "-0.905879136715569672822074835671011788312262199827410845352485425471016823120990316802103839868098102221442916931901771097536001338334801071557089392603590602028875439818482644459485679558059271600853117138328213369477432879138713132393451027086750311915973477565695981563238357265786714094899680978177"),
                                      stoscalar<T>(
                                          "0.0274265097083569482000738362625058204511841551616509759972809374993765019410236080239987462027920403237449474284444948789638628394355878066094467843602824760139004690135115733710861681278905130204344113095556099347782237196035386088178092164366260022756686042906129257040190872924727635407029090663386"));
        nodes[14] = std::make_pair<T>(stoscalar<T>(
            "0.876572020274247885905693554805096754561648533729961992747875751874672710140389672398685521925966785214335879994824238466229758385133578703521189558697554813028871065367362767024067562207082429334408838815831202602466028983606440508853425338132820813990862823629814686443949835240211889904303860419895"),
                                      stoscalar<T>(
                                          "0.0311672278327980889020657568463544194542853414835695355095437188614314126242430459323899675502770854681172632831370422789602958657379399544794489944882423669337641568778676876103415498799281931537899613937659041581231888768414972328438819770226385469193123192380972632082067588109588097319765813981423"));
        nodes[15] = std::make_pair<T>(stoscalar<T>(
            "-0.876572020274247885905693554805096754561648533729961992747875751874672710140389672398685521925966785214335879994824238466229758385133578703521189558697554813028871065367362767024067562207082429334408838815831202602466028983606440508853425338132820813990862823629814686443949835240211889904303860419895"),
                                      stoscalar<T>(
                                          "0.0311672278327980889020657568463544194542853414835695355095437188614314126242430459323899675502770854681172632831370422789602958657379399544794489944882423669337641568778676876103415498799281931537899613937659041581231888768414972328438819770226385469193123192380972632082067588109588097319765813981423"));
        nodes[16] = std::make_pair<T>(stoscalar<T>(
            "0.843588261624393530711089844519656049870887011737552401514913199898841054689853744062040955376960690280695816704859193884502501517954268762320112466620512628476668452660248297407210749638595097454504326132955293426289045605432735622883207966766756385164466962012200557418768425948370488394437779632524"),
                                      stoscalar<T>(
                                          "0.0347772225647704388925485859638024105972813969070680987180066361796767233590362801423131281719636131419846638499551949941320248224095394378130720247934453639087592808429866374736085398086276338344886592794735316537318850395473169040328209710322551135768671808804729962027374860089156824411775608946077"));
        nodes[17] = std::make_pair<T>(stoscalar<T>(
            "-0.843588261624393530711089844519656049870887011737552401514913199898841054689853744062040955376960690280695816704859193884502501517954268762320112466620512628476668452660248297407210749638595097454504326132955293426289045605432735622883207966766756385164466962012200557418768425948370488394437779632524"),
                                      stoscalar<T>(
                                          "0.0347772225647704388925485859638024105972813969070680987180066361796767233590362801423131281719636131419846638499551949941320248224095394378130720247934453639087592808429866374736085398086276338344886592794735316537318850395473169040328209710322551135768671808804729962027374860089156824411775608946077"));
        nodes[18] = std::make_pair<T>(stoscalar<T>(
            "0.807066204029442627082553043024538445973013029460415386575862941812182154004430652858750549469321639979508472468403876478666039115345130378534632582987916912517963717986950244903894418676618938996062028431901957516846264066933590017679657862169406371858661567718685331952688955883779593121488333413434"),
                                      stoscalar<T>(
                                          "0.0382413510658307063172172565237156178638239683549822889292581910340505392241094723284160592135801401793729375778354214012906402625157588605731423234705243025803585381465439498192468739422200783843619859665465451993517044449780382427455830953184651143173247685556045880601715355065761287083146014288716"));
        nodes[19] = std::make_pair<T>(stoscalar<T>(
            "-0.807066204029442627082553043024538445973013029460415386575862941812182154004430652858750549469321639979508472468403876478666039115345130378534632582987916912517963717986950244903894418676618938996062028431901957516846264066933590017679657862169406371858661567718685331952688955883779593121488333413434"),
                                      stoscalar<T>(
                                          "0.0382413510658307063172172565237156178638239683549822889292581910340505392241094723284160592135801401793729375778354214012906402625157588605731423234705243025803585381465439498192468739422200783843619859665465451993517044449780382427455830953184651143173247685556045880601715355065761287083146014288716"));
        nodes[20] = std::make_pair<T>(stoscalar<T>(
            "0.767159032515740339253855437522969053622642330848207372235128588664050836807861029755502704276883040239610191301796134264873242662550770997496988615187423888210846046428872177682831037226164173907472324006626284415388514421668391119179378860961855456485505257264146456162493666064371651697031951275653"),
                                      stoscalar<T>(
                                          "0.0415450829434647492140588223610647977534728260340380630827348212227258256296586929707635839644013631284715345075710659622564449467324978249684928773840551030649825993350348553085257670883154936305063329655125785484153458390782728700528984154364603355339105273978609629412377032026032951901112630120172"));
        nodes[21] = std::make_pair<T>(stoscalar<T>(
            "-0.767159032515740339253855437522969053622642330848207372235128588664050836807861029755502704276883040239610191301796134264873242662550770997496988615187423888210846046428872177682831037226164173907472324006626284415388514421668391119179378860961855456485505257264146456162493666064371651697031951275653"),
                                      stoscalar<T>(
                                          "0.0415450829434647492140588223610647977534728260340380630827348212227258256296586929707635839644013631284715345075710659622564449467324978249684928773840551030649825993350348553085257670883154936305063329655125785484153458390782728700528984154364603355339105273978609629412377032026032951901112630120172"));
        nodes[22] = std::make_pair<T>(stoscalar<T>(
            "0.724034130923814654674482233493665246585092812280722362729366302573351460620089719713283575060489110457751816312048458265880017469389550996665921973014027918948841256117504424843534066640050216202064803248771490766721081949336187585704512646993387431815285304547642968353919065086514684563540806610818"),
                                      stoscalar<T>(
                                          "0.0446745608566942804194485871258503949884627868625020084329214463391914905123021957028550703344519159726224345562767212179043732914351428571983541779475268911435560592358957822063433843122500250243536806587502294230757129517271463797651651015469818341367066387740651882678222754906037261033493830380771"));
        nodes[23] = std::make_pair<T>(stoscalar<T>(
            "-0.724034130923814654674482233493665246585092812280722362729366302573351460620089719713283575060489110457751816312048458265880017469389550996665921973014027918948841256117504424843534066640050216202064803248771490766721081949336187585704512646993387431815285304547642968353919065086514684563540806610818"),
                                      stoscalar<T>(
                                          "0.0446745608566942804194485871258503949884627868625020084329214463391914905123021957028550703344519159726224345562767212179043732914351428571983541779475268911435560592358957822063433843122500250243536806587502294230757129517271463797651651015469818341367066387740651882678222754906037261033493830380771"));
        nodes[24] = std::make_pair<T>(stoscalar<T>(
            "0.677872379632663905211851280675909058849954679026048613071040642975494646879817410787234779026949520681001012272404115964909412280970787148918283989881918558113321844034245504998189305757207944538995185072701494950200354489606220674407089575379844746721958854047082743699334465743405516822151771192066"),
                                      stoscalar<T>(
                                          "0.047616658492490474825906623478929830157998066743449685396769896278809885079055355892118682210180774757747109384378968195455036740099864229304903901142880146924801943630175192362108216633742505135709671052337892279648735272607050210235337551007218584509150625425636699903187782268427217337880508163122"));
        nodes[25] = std::make_pair<T>(stoscalar<T>(
            "-0.677872379632663905211851280675909058849954679026048613071040642975494646879817410787234779026949520681001012272404115964909412280970787148918283989881918558113321844034245504998189305757207944538995185072701494950200354489606220674407089575379844746721958854047082743699334465743405516822151771192066"),
                                      stoscalar<T>(
                                          "0.047616658492490474825906623478929830157998066743449685396769896278809885079055355892118682210180774757747109384378968195455036740099864229304903901142880146924801943630175192362108216633742505135709671052337892279648735272607050210235337551007218584509150625425636699903187782268427217337880508163122"));
        nodes[26] = std::make_pair<T>(stoscalar<T>(
            "0.62886739677651362399516493306999465202490899979016177098173299451953191397707304400095346908800355007293006174616736000433055873171769314960947795528361089429932609529542800256868610229638590593102359817952070198845812423907563561851261601445957728090889504774474084974280584635810937855842434849915"),
                                      stoscalar<T>(
                                          "0.050359035553854474957807619087865606032994093025906330693792057246934414660248147573953693774871660247611749374924487585805428503022566839992044243270326122305199666066834681334068863821316076173415062744068287095846213921807142525528448025579226943214795365534375940674921258646840283258983698304258"));
        nodes[27] = std::make_pair<T>(stoscalar<T>(
            "-0.62886739677651362399516493306999465202490899979016177098173299451953191397707304400095346908800355007293006174616736000433055873171769314960947795528361089429932609529542800256868610229638590593102359817952070198845812423907563561851261601445957728090889504774474084974280584635810937855842434849915"),
                                      stoscalar<T>(
                                          "0.050359035553854474957807619087865606032994093025906330693792057246934414660248147573953693774871660247611749374924487585805428503022566839992044243270326122305199666066834681334068863821316076173415062744068287095846213921807142525528448025579226943214795365534375940674921258646840283258983698304258"));
        nodes[28] = std::make_pair<T>(stoscalar<T>(
            "0.577224726083972703817809238540478772853997286140195528052397399427736996334362534594908017633275835449959914200484540619773247490556206069921731956377945500624510531919133626305484015674947729598885514089617093455705189210617029508116492895975269721772790525289977606373262500741266050661779590367394"),
                                      stoscalar<T>(
                                          "0.0528901894851936670955050562646989146617264856331091863864912338482927624906331606970843403634381497908317850195729589364536877532718433530073031198384043794058712301651801700250106264343517104436330268731364270443107293677300896119296195993166329507710981247494486005793880120808153595434863108391831"));
        nodes[29] = std::make_pair<T>(stoscalar<T>(
            "-0.577224726083972703817809238540478772853997286140195528052397399427736996334362534594908017633275835449959914200484540619773247490556206069921731956377945500624510531919133626305484015674947729598885514089617093455705189210617029508116492895975269721772790525289977606373262500741266050661779590367394"),
                                      stoscalar<T>(
                                          "0.0528901894851936670955050562646989146617264856331091863864912338482927624906331606970843403634381497908317850195729589364536877532718433530073031198384043794058712301651801700250106264343517104436330268731364270443107293677300896119296195993166329507710981247494486005793880120808153595434863108391831"));
        nodes[30] = std::make_pair<T>(stoscalar<T>(
            "0.523160974722233033678225869137508526289187621811884107580229547219414454747347837809780219124173439699792450974289861158062887930828236029338590380981556737953402393425140860014650585971214145353289531160096382178843889840940696415422079848708120598693486797955373090334435553131970686408862001742981"),
                                      stoscalar<T>(
                                          "0.0551995036999841628682034951916354390044509256075610005480562579305852367514577542949214003983936245935099233555326166840067728538535180246281250095428642203897649239499695557145555426826339726223278435361963395286663248980175847584856397277819554489412173746852687479370448932692963760120327051836728"));
        nodes[31] = std::make_pair<T>(stoscalar<T>(
            "-0.523160974722233033678225869137508526289187621811884107580229547219414454747347837809780219124173439699792450974289861158062887930828236029338590380981556737953402393425140860014650585971214145353289531160096382178843889840940696415422079848708120598693486797955373090334435553131970686408862001742981"),
                                      stoscalar<T>(
                                          "0.0551995036999841628682034951916354390044509256075610005480562579305852367514577542949214003983936245935099233555326166840067728538535180246281250095428642203897649239499695557145555426826339726223278435361963395286663248980175847584856397277819554489412173746852687479370448932692963760120327051836728"));
        nodes[32] = std::make_pair<T>(stoscalar<T>(
            "0.466902904750958404544928861650798509236812104258516944181869195134794393442604111789632189952124936754095836980856002340889400030138959568196632396499264601196516170934480223099695683639840286577962921755265396331594124533294340460535616077403003603581290162084535793798166396856727000126686903606732"),
                                      stoscalar<T>(
                                          "0.0572772921004032157051502346847005762415271230041120775388499374768174542185642264331596590441971930673621537502613979228275806036649770523729037269590396605505788888297452487135047545234709500282948119277498415520755790433226932951687496519443335996237447309318373040221125631050166697694449390236842"));
        nodes[33] = std::make_pair<T>(stoscalar<T>(
            "-0.466902904750958404544928861650798509236812104258516944181869195134794393442604111789632189952124936754095836980856002340889400030138959568196632396499264601196516170934480223099695683639840286577962921755265396331594124533294340460535616077403003603581290162084535793798166396856727000126686903606732"),
                                      stoscalar<T>(
                                          "0.0572772921004032157051502346847005762415271230041120775388499374768174542185642264331596590441971930673621537502613979228275806036649770523729037269590396605505788888297452487135047545234709500282948119277498415520755790433226932951687496519443335996237447309318373040221125631050166697694449390236842"));
        nodes[34] = std::make_pair<T>(stoscalar<T>(
            "0.408686481990716729916225495814633286459922842994888064771150983325620538484129111687391580514289998643611473768444870947030708277987006161859792093208429611886207628843479249164358395257062177967891739797397653520072428566708216933630834792815541137692220381363773868440389477030620951341394026068961"),
                                      stoscalar<T>(
                                          "0.0591148396983956357464748174335199106596556025570549985562911334858351427004807103097816283504301067145337581695456289376039830513792879318191825604750751808579778340286564325820343687137802381989835131943251463047540892402824878256504821255914479922071822226677097993296619726123697601505051094196003"));
        nodes[35] = std::make_pair<T>(stoscalar<T>(
            "-0.408686481990716729916225495814633286459922842994888064771150983325620538484129111687391580514289998643611473768444870947030708277987006161859792093208429611886207628843479249164358395257062177967891739797397653520072428566708216933630834792815541137692220381363773868440389477030620951341394026068961"),
                                      stoscalar<T>(
                                          "0.0591148396983956357464748174335199106596556025570549985562911334858351427004807103097816283504301067145337581695456289376039830513792879318191825604750751808579778340286564325820343687137802381989835131943251463047540892402824878256504821255914479922071822226677097993296619726123697601505051094196003"));
        nodes[36] = std::make_pair<T>(stoscalar<T>(
            "0.348755886292160738159817937270407916134309649968392576032122967781281594068675736185795341310484716028037457642863068775826780089438149901878807658464459982959487713073916314556479367920745403299588431111158135803289351156752478519477605284556307485093490096028253202684097955979151597426495180642202"),
                                      stoscalar<T>(
                                          "0.0607044391658938800529692320278204778852608642564777551115114446606378942797517536200858196347711295023217012728637598166654877210181782152135646601372156279405959647914622873168554290750248087410116446098722188064594162498345794988898110131836144853311576028948319740229697351476968609612200982451531"));
        nodes[37] = std::make_pair<T>(stoscalar<T>(
            "-0.348755886292160738159817937270407916134309649968392576032122967781281594068675736185795341310484716028037457642863068775826780089438149901878807658464459982959487713073916314556479367920745403299588431111158135803289351156752478519477605284556307485093490096028253202684097955979151597426495180642202"),
                                      stoscalar<T>(
                                          "0.0607044391658938800529692320278204778852608642564777551115114446606378942797517536200858196347711295023217012728637598166654877210181782152135646601372156279405959647914622873168554290750248087410116446098722188064594162498345794988898110131836144853311576028948319740229697351476968609612200982451531"));
        nodes[38] = std::make_pair<T>(stoscalar<T>(
            "0.287362487355455576735886461316797687851558305801039778908500032168999844268762601001704292339961272995214058625810091249868879016571972602501163638980369411897516808779888097191828724252681176366227012075027580894573518833825847931483730601352532268455529624894259912734014534581597096756027464635606"),
                                      stoscalar<T>(
                                          "0.062039423159892663904197784137598518306383399665091461569037814502739035901616600743030165464234179212395062558132636363297409060172793258866550396664495162040984605544825316008884683710980955466873918479076977756421869815824787695811886221765094762930371587715267114849710504183568270614525730290936"));
        nodes[39] = std::make_pair<T>(stoscalar<T>(
            "-0.287362487355455576735886461316797687851558305801039778908500032168999844268762601001704292339961272995214058625810091249868879016571972602501163638980369411897516808779888097191828724252681176366227012075027580894573518833825847931483730601352532268455529624894259912734014534581597096756027464635606"),
                                      stoscalar<T>(
                                          "0.062039423159892663904197784137598518306383399665091461569037814502739035901616600743030165464234179212395062558132636363297409060172793258866550396664495162040984605544825316008884683710980955466873918479076977756421869815824787695811886221765094762930371587715267114849710504183568270614525730290936"));
        nodes[40] = std::make_pair<T>(stoscalar<T>(
            "0.224763790394689061224865440174692277438561804041654806164742641045181941897514232100896676983252396875773808592502081363328354617168985552474951138695351835278126589051852143642348379363158074543894634431321870443291443766900971542411806793369142770634918968364482296304349630807073654813958957637794"),
                                      stoscalar<T>(
                                          "0.0631141922862540256571260227502333181274136433711007912111472479080381192108667027155910192506227653596610305040807560485093394973813380792327058210857230435954562332942640802838191623314795943405273621193000469990151266525792444007093953888789813909319080782846780012257217964211349623840688984465424"));
        nodes[41] = std::make_pair<T>(stoscalar<T>(
            "-0.224763790394689061224865440174692277438561804041654806164742641045181941897514232100896676983252396875773808592502081363328354617168985552474951138695351835278126589051852143642348379363158074543894634431321870443291443766900971542411806793369142770634918968364482296304349630807073654813958957637794"),
                                      stoscalar<T>(
                                          "0.0631141922862540256571260227502333181274136433711007912111472479080381192108667027155910192506227653596610305040807560485093394973813380792327058210857230435954562332942640802838191623314795943405273621193000469990151266525792444007093953888789813909319080782846780012257217964211349623840688984465424"));
        nodes[42] = std::make_pair<T>(stoscalar<T>(
            "0.161222356068891718056437390783497694774374379741895117703242637556516342099581832766941721330407890504746928991364348486568764425061235500792711661779507572682685621131902409928648052994783067550968121609978924157998607288317318018375677764130611901424839319880402144373410195327247808635486880019457"),
                                      stoscalar<T>(
                                          "0.0639242385846481866239062018255154089189740849826429998908742074995537825861121896138913510047200154797654299464853013914131198803664765984362905448826628656098363699210906102535255075640718685418176298042239357008734991509977575972169401757797865944093378190769429188446886679448085452814110271704638"));
        nodes[43] = std::make_pair<T>(stoscalar<T>(
            "-0.161222356068891718056437390783497694774374379741895117703242637556516342099581832766941721330407890504746928991364348486568764425061235500792711661779507572682685621131902409928648052994783067550968121609978924157998607288317318018375677764130611901424839319880402144373410195327247808635486880019457"),
                                      stoscalar<T>(
                                          "0.0639242385846481866239062018255154089189740849826429998908742074995537825861121896138913510047200154797654299464853013914131198803664765984362905448826628656098363699210906102535255075640718685418176298042239357008734991509977575972169401757797865944093378190769429188446886679448085452814110271704638"));
        nodes[44] = std::make_pair<T>(stoscalar<T>(
            "0.0970046992094626989300539558536245201527362293009369864305807659448040362626222850993336966968384822517829467327679163382801466872154618928852626145073774770162163696263537345177046349984854978452872785570969443368446335103682147547164432067924148531272555837752946048377501537139077791247870225636522"),
                                      stoscalar<T>(
                                          "0.0644661644359500822065041936577050657256919244555303087605584565373923533729548831698602843931871385340030175202203667683923636126306800176183882596684399495491942372660596596356926236523817913678955210087298528334383346959188152334943162945018899436306253539186876929627564832875541622809215061790302"));
        nodes[45] = std::make_pair<T>(stoscalar<T>(
            "-0.0970046992094626989300539558536245201527362293009369864305807659448040362626222850993336966968384822517829467327679163382801466872154618928852626145073774770162163696263537345177046349984854978452872785570969443368446335103682147547164432067924148531272555837752946048377501537139077791247870225636522"),
                                      stoscalar<T>(
                                          "0.0644661644359500822065041936577050657256919244555303087605584565373923533729548831698602843931871385340030175202203667683923636126306800176183882596684399495491942372660596596356926236523817913678955210087298528334383346959188152334943162945018899436306253539186876929627564832875541622809215061790302"));
        nodes[46] = std::make_pair<T>(stoscalar<T>(
            "0.0323801709628693620333222431521344420459628023615180924250032200173778192033824263362735606192681682400367095349344164805253339336387227562143033309933613048005985693434381987818201481883459708779882194210519641874072840153368237061052666187976157919313172960863861628381000595094587588993963729641833"),
                                      stoscalar<T>(
                                          "0.0647376968126839225030249387365915535520819189466365100145630955230830789112652102024388586148790257788504178817149406047213653777355165787109361497393610668464404058173590514459457218162820036853260853476893083916876577017950192396753949750327804531473587112366883193491439113058748321377811865401473"));
        nodes[47] = std::make_pair<T>(stoscalar<T>(
            "-0.0323801709628693620333222431521344420459628023615180924250032200173778192033824263362735606192681682400367095349344164805253339336387227562143033309933613048005985693434381987818201481883459708779882194210519641874072840153368237061052666187976157919313172960863861628381000595094587588993963729641833"),
                                      stoscalar<T>(
                                          "0.0647376968126839225030249387365915535520819189466365100145630955230830789112652102024388586148790257788504178817149406047213653777355165787109361497393610668464404058173590514459457218162820036853260853476893083916876577017950192396753949750327804531473587112366883193491439113058748321377811865401473"));

        return nodes;
      }

      throw std::runtime_error("Invalid num_nodes passed to gauss_legendre_nodes");
    }

    // Simple implementation without meta programming...
    template<typename T, int DIM>
    class multi_array {

      template<typename T2, int DIM2>
      friend class multi_array;

    public:
      multi_array() : owner_(true), p_data_(NULL), num_elements_(0) {
      }

      multi_array(int N1) : owner_(true), p_data_(new T[N1]), num_elements_(N1) {
        assert(DIM == 1);
        extents_[0] = N1;
      }

      multi_array(int N1, int N2) : owner_(true), p_data_(new T[N1*N2]), num_elements_(N1*N2) {
        assert(DIM == 2);
        extents_[0] = N1;
        extents_[1] = N2;
      }

      multi_array(int N1, int N2, int N3) : owner_(true), p_data_(new T[N1*N2*N3]), num_elements_(N1*N2*N3) {
        assert(DIM == 3);
        extents_[0] = N1;
        extents_[1] = N2;
        extents_[2] = N3;
      }

      multi_array(std::size_t *dims) {
        resize(dims);
      }

      multi_array(const multi_array<T,DIM>& other) : p_data_(NULL) {
          owner_ = true;
          resize(&other.extents_[0]);
          std::copy(other.origin(), other.origin()+other.num_elements(), origin());
      }

      ~multi_array() {
        if (this->owner_) {
            delete[] p_data_;
        }
      }

      multi_array<T,DIM>& operator=(const multi_array<T,DIM>& other) {
          this->owner_ = other.owner_;
          for (int i = 0; i < DIM; ++i) {
              this->extents_[i] = other.extents_[i];
          }
          this->num_elements_ = other.num_elements_;

          if (this->p_data_ != NULL) {
              delete[] this->p_data_;
              this->p_data_ = NULL;
          }

          if (other.owner_) {
              // allocate memoery and copy data
              if (this->p_data_ == NULL) {
                  this->p_data_ = new T[this->num_elements_];
              }
              for (int i=0; i<this->num_elements_; ++i) {
                  *(this->p_data_+i) = *(other.p_data_+i);
              }
          } else {
              // point to the same data
              this->p_data_ = other.p_data_;
          }

          return *this;
      }

      std::size_t extent(int i) const {
        assert(i >= 0);
        assert(i < DIM);
        return extents_[i];
      }

      void resize(const std::size_t* const dims) {
        if (!owner_) {
            throw std::runtime_error("resize is not permitted for a view");
        }

        std::size_t tot_size = std::accumulate(dims, dims + DIM, 1, std::multiplies<std::size_t>());
        delete[] p_data_;
        p_data_ = new T[tot_size];
        num_elements_ = tot_size;
        for (int i = 0; i < DIM; ++i) {
          extents_[i] = dims[i];
        }
      }

      multi_array<T,DIM-1> make_view(std::size_t most_left_index) const {
          multi_array<T,DIM-1> view;
          view.owner_ = false;
          std::size_t new_size = 1;
          for (int i=0; i<DIM-1; ++i) {
              view.extents_[i] = this->extents_[i+1];
              new_size *= view.extents_[i];
          }
          view.num_elements_ = new_size;
          view.p_data_ = p_data_ + most_left_index * new_size;

          return view;
      }

      std::size_t num_elements() const {
        return num_elements_;
      }

      bool is_view() const {
          return !owner_;
      }

      T *origin() const {
        return p_data_;
      }

      T &operator()(int i) {
        assert(DIM == 1);
        int idx = i;
        assert(idx >= 0 && idx < num_elements());
        return *(p_data_+idx);
      }

      const T &operator()(int i) const {
        assert(DIM == 1);
        int idx = i;
        assert(idx >= 0 && idx < num_elements());
        return *(p_data_+idx);
      }

      T &operator()(int i, int j) {
        assert(DIM == 2);
        int idx = extents_[1] * i + j;
        assert(idx >= 0 && idx < num_elements());
        return *(p_data_+idx);
      }

      const T &operator()(int i, int j) const {
        assert(DIM == 2);
        int idx = extents_[1] * i + j;
        assert(idx >= 0 && idx < num_elements());
        return *(p_data_+idx);
      }

      T &operator()(int i, int j, int k) {
        assert(DIM == 3);
        int idx = (i * extents_[1] + j) * extents_[2] + k;
        assert(idx >= 0 && idx < num_elements());
        return *(p_data_+idx);
      }

      const T &operator()(int i, int j, int k) const {
        assert(DIM == 3);
        int idx = (i * extents_[1] + j) * extents_[2] + k;
        assert(idx >= 0 && idx < num_elements());
        return *(p_data_+idx);
      }

    private:
      bool owner_;
      T* p_data_;
      std::size_t num_elements_;
      std::size_t extents_[DIM];
    };

    // https://www.physics.ohio-state.edu/~wilkins/computing/HDF/hdf5tutorial/examples/C/h5_rdwt.c
    // https://support.hdfgroup.org/ftp/HDF5/current/src/unpacked/examples/h5_read.c
    template<typename T> hid_t get_native_type();

    template<>
    inline
    hid_t
    get_native_type<double>() {
        return H5T_NATIVE_DOUBLE;
    }

    template<>
    inline
    hid_t
    get_native_type<int>() {
        return H5T_NATIVE_INT;
    }

    // read a scalar
    template<typename T>
    T hdf5_read_scalar(hid_t &file, const std::string &name) {
      hid_t dataset = H5Dopen2(file, name.c_str(), H5P_DEFAULT);
      if (dataset < 0) {
          throw std::runtime_error("Failed to load dataset" + name);
      }
      T data;
      H5Dread(dataset, get_native_type<T>(), H5S_ALL, H5S_ALL, H5P_DEFAULT, &data);
      H5Dclose(dataset);
      return data;
    }

    // read array of double
    template<int DIM>
    void hdf5_read_double_array(hid_t &file, const std::string &name, std::vector <std::size_t> &extents,
                                std::vector<double> &data) {
      hid_t dataset = H5Dopen2(file, name.c_str(), H5P_DEFAULT);
      if (dataset < 0) {
          throw std::runtime_error("Failed to load dataset" + name);
      }
      hid_t space = H5Dget_space(dataset);
      std::vector <hsize_t> dims(DIM);
      int n_dims = H5Sget_simple_extent_dims(space, &dims[0], NULL);
      assert(n_dims == DIM);
      std::size_t tot_size = std::accumulate(dims.begin(), dims.end(), 1, std::multiplies<double>());
      data.resize(tot_size);
      extents.resize(DIM);
      for (int i = 0; i < DIM; ++i) {
        extents[i] = static_cast<std::size_t>(dims[i]);
      }
      H5Dread(dataset, H5T_NATIVE_DOUBLE, H5S_ALL, H5S_ALL, H5P_DEFAULT, &data[0]);
      H5Dclose(dataset);
    }

    // read a multi_array
    template<typename T, int DIM>
    multi_array<T, DIM> load_multi_array(hid_t &file, const std::string &name) {
      hid_t dataset = H5Dopen2(file, name.c_str(), H5P_DEFAULT);
      if (dataset < 0) {
          throw std::runtime_error("Faild to open a dataset.");
      }
      hid_t space = H5Dget_space(dataset);
      std::vector <hsize_t> dims(DIM);
      int n_dims = H5Sget_simple_extent_dims(space, &dims[0], NULL);
      assert(n_dims == DIM);
      std::size_t tot_size = std::accumulate(dims.begin(), dims.end(), 1, std::multiplies<std::size_t>());
      std::vector <std::size_t> extents(DIM);
      for (int i = 0; i < DIM; ++i) {
        extents[i] = static_cast<std::size_t>(dims[i]);
      }
      multi_array<T, DIM> a;
      a.resize(&extents[0]);
      H5Dread(dataset, get_native_type<T>(), H5S_ALL, H5S_ALL, H5P_DEFAULT, a.origin());
      std::vector<T> data(tot_size);
      H5Dread(dataset, get_native_type<T>(), H5S_ALL, H5S_ALL, H5P_DEFAULT, &data[0]);
      H5Dclose(dataset);
      return a;
    }

    inline
    std::size_t find_section(const multi_array<double,1> &section_edges, double x) {
        std::size_t idx = std::upper_bound(
                             section_edges.origin(),
                             section_edges.origin() + section_edges.num_elements(),
                             x) - section_edges.origin() - 1;

        return std::min(idx, section_edges.num_elements()-2);
    }

    inline
    double interpolate_impl(double dx, const multi_array<double,1>& coeffs) {
        double value = 0.0;
        double dx_power = 1.0;
        std::size_t N = coeffs.num_elements();
        for (int p=0; p < N; ++p) {
            value += dx_power * coeffs(p);
            dx_power *= dx;
        }
        return value;
    }

    inline
    double interpolate(double x, const multi_array<double,2> &_data, const multi_array<double,1> &section_edges) {
        std::size_t section_idx = find_section(section_edges, x);
        return interpolate_impl(x - section_edges(section_idx), _data.make_view(section_idx));
    };

    inline
    multi_array<double,1>
    differentiate_coeff(const multi_array<double,1>& coeffs, std::size_t order) {
        std::size_t k = coeffs.num_elements();
        multi_array<double,1> coeffs_deriv(coeffs);//this always makes a copy
        assert(coeffs_deriv.num_elements() == k);
        for (int o=0; o < order; ++o) {
            for (int p=0; p < k-1-o; ++p) {
                coeffs_deriv(p) = (p+1) * coeffs_deriv(p+1);
            }
            coeffs_deriv(k-1-o) = 0;
        }
        return coeffs_deriv;
    }

    inline
    double interpolate_derivative(double x, std::size_t order, const multi_array<double,2> &_data, const multi_array<double,1> &section_edges) {
        using namespace internal;
        std::size_t section_idx = find_section(section_edges, x);
        multi_array<double,1> coeffs = differentiate_coeff(_data.make_view(section_idx), order);
        return interpolate_impl(x - section_edges(section_idx), coeffs);
    }


    inline
    int even_odd_sign(const int l){
      return (l%2==0 ? 1 : -1);
    }
  }

  struct func {
    internal::multi_array<double, 1> section_edges;
    internal::multi_array<double, 3> data;
    int np;
    int ns;
  };

  struct ref {
    internal::multi_array<double, 2> data;
    internal::multi_array<double, 1> max;
  };


  class basis {
  public:
    basis(
            const std::string &file_name,
            const std::string &prefix = ""
    ) throw(std::runtime_error) {
      hid_t file = H5Fopen(file_name.c_str(), H5F_ACC_RDONLY, H5P_DEFAULT);

      if (file < 0) {
          throw std::runtime_error("Failed to open " + file_name + "!");
      }

      //read info
      Lambda_ = internal::hdf5_read_scalar<double>(file, prefix + std::string("/info/Lambda"));
      dim_ = internal::hdf5_read_scalar<int>(file, prefix + std::string("/info/dim"));
      statistics_ = internal::hdf5_read_scalar<int>(file, prefix + std::string("/info/statistics")) == 0 ? "B" : "F";

      //read sl
      sl_ = internal::load_multi_array<double,1>(file, prefix + std::string("/sl"));

      //read ulx
      ulx_.data = internal::load_multi_array<double,3>(file, prefix + std::string("/ulx/data"));
      ulx_.np = internal::hdf5_read_scalar<int>(file, prefix + std::string("/ulx/np"));
      ulx_.ns = internal::hdf5_read_scalar<int>(file, prefix + std::string("/ulx/ns"));
      ulx_.section_edges = internal::load_multi_array<double,1>(file, prefix + std::string("/ulx/section_edges"));

      //read ref_ulx
      ref_ulx_.data = internal::load_multi_array<double,2>(file, prefix + std::string("/ulx/ref/data"));
      ref_ulx_.max = internal::load_multi_array<double,1>(file, prefix + std::string("/ulx/ref/max"));

      //read vly
      vly_.data = internal::load_multi_array<double,3>(file, prefix + std::string("/vly/data"));
      vly_.np = internal::hdf5_read_scalar<int>(file, prefix + std::string("/vly/np"));
      vly_.ns = internal::hdf5_read_scalar<int>(file, prefix + std::string("/vly/ns"));
      vly_.section_edges = internal::load_multi_array<double,1>(file, prefix + std::string("/vly/section_edges"));

      //read ref_vly
      ref_vly_.data = internal::load_multi_array<double,2>(file, prefix + std::string("/vly/ref/data"));
      ref_vly_.max = internal::load_multi_array<double,1>(file, prefix + std::string("/vly/ref/max"));

      H5Fclose(file);
    }

    /**
      * Return number of basis functions
      * @return  number of basis functions
      */
    int dim() const { return dim_; }

    double sl(int l) const throw(std::runtime_error) {
      assert(l >= 0 && l < dim());
      return static_cast<double>(sl_(l));
    }

    double ulx(int l, double x) const {
      using namespace internal;
      if(x >= 0) {
          return interpolate(x, ulx_.data.make_view(l), ulx_.section_edges);
      } else {
          return interpolate(-x, ulx_.data.make_view(l), ulx_.section_edges) * even_odd_sign(l);
      }
    }

    std::vector < std::vector <double> > check_ulx() const {
      double ulx_max = ref_ulx_.max(2);
      std::vector < std::vector<double> > ref_data(ref_ulx_.data.extent(0));
      int count = 0;
      for (int i=0; i<ref_ulx_.data.extent(0); i++) {
          if (ref_ulx_.data(i, 2) == 0) {
            ref_data[i].push_back(ref_ulx_.data(i, 0));
            ref_data[i].push_back(ref_ulx_.data(i, 1));
            ref_data[i].push_back(fabs(ulx(ref_ulx_.data(i, 0)-1, ref_ulx_.data(i, 1)) - ref_ulx_.data(i, 3))/ulx_max);
            count++;
          }
      }
      ref_data.resize(count);
      return ref_data;
    }

    std::vector < std::vector <double> > check_vly() const {
      double vly_max = ref_vly_.max(2);
      std::vector < std::vector<double> > ref_data(ref_vly_.data.extent(0));
      int count = 0;
      for (int i=0; i<ref_vly_.data.extent(0); i++) {
        if (ref_vly_.data(i, 2) == 0) {
          ref_data[i].push_back(ref_vly_.data(i, 0));
          ref_data[i].push_back(ref_vly_.data(i, 1));
          ref_data[i].push_back(fabs(vly(ref_vly_.data(i, 0)-1, ref_vly_.data(i, 1)) - ref_vly_.data(i, 3))/vly_max);
          count++;
        }
      }
      ref_data.resize(count);
      return ref_data;
    }

    double d_ulx(int l, double x, std::size_t order) const {
      using namespace internal;
      if(x >= 0) {
          return interpolate_derivative(x, order, ulx_.data.make_view(l), ulx_.section_edges);
      } else {
          return interpolate_derivative(-x, order, ulx_.data.make_view(l), ulx_.section_edges) * even_odd_sign(l + order);
      }
    }

    double vly (int l, double y) const {
      using namespace internal;
      if(y >= 0) {
          return interpolate(y, vly_.data.make_view(l), vly_.section_edges);
      } else {
          return interpolate(-y, vly_.data.make_view(l), vly_.section_edges) * even_odd_sign(l);
      }
    }

    double d_vly(int l, double y, std::size_t order) const {
      using namespace internal;
      if(y >= 0) {
          return interpolate_derivative(y, order, vly_.data.make_view(l), vly_.section_edges);
      } else {
          return interpolate_derivative(-y, order, vly_.data.make_view(l), vly_.section_edges) * even_odd_sign(l + order);
      }
    }

    double get_ref_ulx(std::size_t order) const {
      double ref_data;
      for (int i = 0; i < ref_ulx_.data.extent(0); i++) {
        if (ref_ulx_.data(i, 2) == order) {
          ref_data = ref_ulx_.data(i, 3);
        }
      }
      return ref_data;
    }

    int num_sections_x() const {
      return ulx_.data.extent(1);
    }

    int num_sections_y() const {
      return vly_.data.extent(1);
    }


  protected:
    double Lambda_;
    int dim_;
    std::string statistics_;
    internal::multi_array<double, 1> sl_;
    func ulx_;
    func vly_;
    ref ref_ulx_;
    ref ref_vly_;
  };
<<<<<<< HEAD

  inline
  basis load(const std::string& statistics, double Lambda, const std::string& file_name="./irbasis.h5") {
    std::stringstream ss;
    ss << std::fixed;
    ss << std::setprecision(1);
    std::string prefix;
    if (statistics == "F") {
        prefix = "basis_f-mp-Lambda" + ss.str() + "_np8";
    } else if (statistics == "B") {
        prefix = "basis_b-mp-Lambda" + ss.str() + "_np8";
    } else {
        throw std::runtime_error("Unsupported statistics " + statistics);
    }

    return basis(file_name, prefix);
  }

};
